stages:     
  - passar-sonar  
  - buildar

  - gerar-docker
  - deploy


checagem-sonar:
  stage: passar-sonar
  #tags: ["paraiso-runner-sh"]
  image: mcr.microsoft.com/dotnet/sdk:8.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
    GIT_DEPTH: "0"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
      - cd src/paraiso.web/
      - ls
      - dotnet sonarscanner begin /k:"paraiso-proibido_web-front_AZL5iGpgOlKdynBn1dsH" /d:sonar.host.url=$SONAR_HOST_URL  /d:sonar.token=$SONAR_TOKEN
      - dotnet build paraiso.web.csproj
      - dotnet sonarscanner end /d:sonar.token=$SONAR_TOKEN

  allow_failure: true
  only:
    - merge_requests
    - dev

buildar:
  stage: buildar
  tags: ["paraiso-runner-sh"]
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
      - cd src/paraiso.web/
      - mkdir -p ~/apps/dev/build

      - "sed -i 's|\"Urls\": \"http://localhost:55910\"|\"Urls\": \"http://0.0.0.0:55910\"|g' AppSettings.json"

      - dotnet build paraiso.web.csproj
      - dotnet publish -o ~/apps/dev/build
      - pwd
  allow_failure: true
  only:
    - merge_requests
    - dev


gerar-imagem:
  stage: gerar-docker
  #tags: ["alemanha-5-paraiso"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
  #  - export DOCKER_HOST=tcp://docker:2375
    - echo 'Iniciando o build'
  script:
    
    - |
      if [[ "$CI_COMMIT_TAG" =~ ^dev- ]]; then
        ASPNETCORE_ENVIRONMENT="Development"
        PORT="55910"
        ENVIRONMENT_NAME="dev"
        CONTAINER_NAME="paraiso-web-dev"
      elif [[ "$CI_COMMIT_TAG" =~ ^prod- ]]; then
        ASPNETCORE_ENVIRONMENT="Production"
        PORT="55921"
        ENVIRONMENT_NAME="prod"
        CONTAINER_NAME="paraiso-web-dev"
      else
        echo "Tag não suportada para deploy."
        exit 1
      fi

    - ls
    - cd src
    - docker login -u $USUARIO_DOCKER -p $SENHA_DOCKER $SERVIDOR_DOCKER
    - docker build -t $CONTAINER_NAME:$CI_COMMIT_TAG .
    - docker tag $CONTAINER_NAME:$CI_COMMIT_TAG $SERVIDOR_DOCKER/$CONTAINER_NAME:$CI_COMMIT_TAG
    - docker push $SERVIDOR_DOCKER/$CONTAINER_NAME:$CI_COMMIT_TAG

  after_script:
    - echo 'Build e Imagem Finalizados'
  retry:
    max: 2 
    when: always 
  only:
    - tags

colocar-no-ar:
  stage: deploy
  tags: ["alemanha-5-paraiso"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
  #  - export DOCKER_HOST=tcp://docker:2375
    - echo 'Iniciando o build'
  script:
    - docker login -u $USUARIO_DOCKER -p $SENHA_DOCKER $SERVIDOR_DOCKER
    # Extraímos a versão removendo o prefixo dev- ou prod-
    - TAG_VERSION=$CI_COMMIT_TAG
    - echo $TAG_VERSION
    
    - |
      if [[ "$CI_COMMIT_TAG" =~ ^dev- ]]; then
        ASPNETCORE_ENVIRONMENT="Development"
        PORT="55910"
        ENVIRONMENT_NAME="dev"
        CONTAINER_NAME="paraiso-web-dev"
      elif [[ "$CI_COMMIT_TAG" =~ ^prod- ]]; then
        ASPNETCORE_ENVIRONMENT="Production"
        PORT="55921"
        ENVIRONMENT_NAME="prod"
        CONTAINER_NAME="paraiso-web-dev"
      else
        echo "Tag não suportada para deploy."
        exit 1
      fi

    # Faz o pull da versão correta da imagem
    - docker pull $SERVIDOR_DOCKER/$CONTAINER_NAME:$TAG_VERSION

    # Verifica e cria a rede necessária, se não existir
    - docker network inspect rede_paraiso >/dev/null 2>&1 || docker network create rede_paraiso

    # Remove qualquer container antigo com o mesmo nome
    - docker rm -f $CONTAINER_NAME || true

    # Executa o novo container com a versão e ambiente corretos
    - docker run --network rede_paraiso -d -p $PORT:8080 --name $CONTAINER_NAME -e ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT $SERVIDOR_DOCKER/$CONTAINER_NAME:$TAG_VERSION


  after_script:
    - echo 'Atualização do servidor realizada'
#  environment:
#    name: $ENVIRONMENT_NAME
#    url: http://209.126.11.117:$PORT
  retry:
    max: 2
    when: always
  only:
    - tags
